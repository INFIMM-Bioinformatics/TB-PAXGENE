---
title: "Correlation w. late response"
author: "Tu Hu"
format: html
editor: visual
---

## Set up

```{r load packages}
library(dplyr)
library(SummarizedExperiment)
library(GSVA)
library(tidyr)
library(stringr)
library(purrr)
```

## Load gene expression data

```{r}
se <- readr::read_rds("../data/se_pcoding_scale_abundant_filtS.rds")
head(se)
```

## Calulate GSVA scores

GSVA scores were calculated for each sample using the gene sets from the Molecular Signatures Database (MSigDB).

```{r prepare count matrix}
count_matrix <- 
  se %>% assay(3) %>% as.matrix() # log2-transformed normalized counts
count_matrix <- log2(count_matrix + 1)
```

```{r prepare gene set}
gs <- 
  tibble(gs_name = c("CP:REACTOME", 
                     "GO:BP", 
                     "GO:MF")) %>% 
  mutate(gs_list = purrr::map(gs_name, function(subcat){
  gs_df <- msigdbr::msigdbr(species = "Homo sapiens", 
                            subcategory = subcat) %>% 
    group_by(gs_name) %>% tidyr::nest() %>% 
    mutate(gene_id = purrr::map(data, ~ .x %>% pull(gene_symbol))) %>% select(-data)
  gs_list <- gs_df$gene_id
  names(gs_list) <- gs_df$gs_name
  return(gs_list)
}))

gs_GOBP <- 
  gs$gs_list[[2]]
```

```{r}
pathway_score <- gsva(
  count_matrix, gs_GOBP
)

pathway_score_selected <- 
  pathway_score[c("GOBP_NEGATIVE_REGULATION_OF_VIRAL_PROCESS",
    "GOBP_TYPE_I_INTERFERON_PRODUCTION",
    "GOBP_INFLAMMATORY_RESPONSE",
    "GOBP_TYPE_2_IMMUNE_RESPONSE",
    "GOBP_INTERLEUKIN_1_PRODUCTION",
    "GOBP_INTERLEUKIN_6_PRODUCTION",
    "GOBP_INTERLEUKIN_10_PRODUCTION",
    "GOBP_INTERLEUKIN_18_MEDIATED_SIGNALING_PATHWAY",
    "GOBP_INTERLEUKIN_27_MEDIATED_SIGNALING_PATHWAY",
    "GOBP_B_CELL_ACTIVATION"), ] %>% t() %>% 
  as_tibble(rownames = "sample_name") %>% 
  mutate(animal = sample_name %>% str_extract("[:alnum:]{6}"),
         sample_date = sample_name %>% str_extract("[:digit:]{4}\\.[:digit:]{2}\\.[:digit:]{2}")) %>% 
  left_join(colData(se) %>% as_tibble() %>% select(animal:timepoint),
            by = c("animal", "sample_date")) %>% 
  select(!contains("GOBP"), contains("GOBP"))

```

```{r filling missing values}

# calculate the baseline score (for filling the missing values)
pathway_score_baseline <- 
  pathway_score_selected %>% 
    filter(timepoint == "pre") %>% 
    select(contains("GOBP"))
pathway_score_baseline_mean <- colMeans(pathway_score_baseline)

# add missing values with imputed
pathway_score_selected_addmissing <- 
  pathway_score_selected %>% 
  bind_rows(
    tibble(sample_name = c("CGB097.2019.06.24", "CGB065.2019.06.24"),
       animal = c("CGB097", "CGB065"),
       sample_date = c("2019.06.24", "2019.06.24"),
       vacc = c("H107_CAF04_CpG", "H107_CAF09c"),
       timepoint = c("pre", "pre")) %>% 
      bind_cols(pathway_score_baseline_mean %>% as.data.frame() %>% t())
  ) 

pathway_score_selected_addmissing_baseline_corr <- # baseline correction
  pathway_score_selected_addmissing %>% 
  arrange(animal, sample_date) %>% 
  group_by(animal) %>% 
  nest() %>% 
  mutate(data_baseline_corr = map(data, function(x){
    GOBP_index <- x %>% colnames() %>% str_detect("GOBP") %>% which()
    x_baseline_corr <- 
      bind_rows(x[2, GOBP_index] - x[1, GOBP_index],
                x[3, GOBP_index] - x[1, GOBP_index])
    x_baseline_corr_meta <- 
      x[2:3, -GOBP_index] %>% 
      bind_cols(x_baseline_corr)
    return(x_baseline_corr_meta)
  })) %>% 
  select(-data) %>% 
  unnest(data_baseline_corr)
```

## Load late response data

```{r}
late_response <- 
  readxl::read_xlsx("../data/late_response_parameters.xlsx") %>% 
  mutate(across(contains(c("ELISPOT", "BAL")), as.numeric))
```

```{r}
late_response_meta <- 
  pathway_score_selected_addmissing_baseline_corr %>% 
  left_join(late_response, by = c("animal" = "NHP Name")) %>% 
  ungroup()
```

## Calculate correlation

```{r}
# corr <- 
#   pathway_score_selected_group$data[[1]] %>% 
#   tibble::column_to_rownames("sample_name")
# 
# library(stringr)
# colnames(corr) <- 
#   corr %>% colnames() %>% 
#   str_remove("GOBP_") %>% 
#   str_replace("INTERLEUKIN_","IL")
# 
# library(corrplot)
# 
# 
# pmat <- cor.mtest(corr)
# corr %>% 
#   cor(use = "complete.obs") %>% 
#   corrplot::corrplot(p.mat = pmat$p, 
#                      col=colorRampPalette(c("blue","white","red"))(200))

corr_plot <- 
  late_response_meta %>% 
  group_by(vacc, timepoint) %>% 
  nest() %>% 
  mutate(
    corr = map(data, function(x){
    t <- x %>% dplyr::select(contains(c("GOBP", "ELISPOT", "BAL")))
    colnames(t) <- colnames(t) %>% str_remove("GOBP_") %>% str_replace("INTERLEUKIN_", "IL")
    m <- t %>% as.matrix()
    
    cor_coefficient <-  cor(m, use= "complete.obs", method = "spearman")
    p_mat <- corrplot::cor.mtest(m, method = "spearman")
    result <- list(p_mat = p_mat, cor_coefficient = cor_coefficient)
    return(result)
  }),
    
    plot = pmap(list(vacc, timepoint, corr), 
                function(x1, x2, x3){
                  fn <- paste0("../data/figure/", x1, "_", x2, ".pdf")
                  pdf(width = 8, height = 8, file = fn)
                  corrplot::corrplot(x3[["cor_coefficient"]],
                                     title = paste(x1, x2), 
                                     mar = c(1.5, 1.5, 1.5, 1.5),
                                     col=colorRampPalette(c("blue","white","red"))(200),
                                     p.mat = x3[["p_mat"]]$p
                                     )
                  dev.off()
                }))
```

```{r}
cor_t <- 
  late_response_meta %>% 
  select(contains(c("GOBP", "ELISPOT", "BAL"))) %>% 
  as.matrix()

colnames(cor_t) <- colnames(cor_t) %>% str_remove("GOBP_") %>% str_replace("INTERLEUKIN_", "IL")

cor_p <- cor_t %>% corrplot::cor.mtest(method = "spearman")

cor_coeff <- cor_t %>% cor(use = "complete.obs", method = "spearman")

pdf(width = 8, height = 8, file = "../data/figure/corr_pathway_late_response.pdf")
corrplot::corrplot(cor_coeff, col=colorRampPalette(c("blue","white","red"))(200),
                   mar = c(1.5, 1.5, 1.5, 1.5),
                   p.mat = cor_p$p)
dev.off()
```







