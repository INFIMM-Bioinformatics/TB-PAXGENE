---
title: "RNA-seq: downstream analysis"
author: "Tu Hu"
format: html
editor: visual
---

# DE analysis

```{r load library}
#| message: false
#| warning: false
library(DESeq2)
library(EnhancedVolcano)
library(ggvenn)
library(stringr)
```

```{r load data}
se <- readRDS("../data/se_pcoding_scale_abundant_filtS.rds")
```

## Compare after- (timepoint 1, 2) and pre- immune within each vacc

```{r post-immu vs pre (paired)}

#|message:False

vacc_l <- se$vacc %>% unique()

DGE_immu_vs_pre <- 
  lapply(vacc_l,
         function(vacc){
    se <-   
      se[rowData(se)$.abundant == TRUE,se$vacc == vacc]
    rownames(se) <- rowData(se)$gene_name
    
    count <- se %>% assay(1) %>% 
      as.matrix() %>% 
      round()
    
    dds <- 
      DESeqDataSetFromMatrix(
        count, 
        colData = colData(se),
        design = ~ animal + timepoint
        )
  
    dds <- DESeq(dds, parallel = F)
  
    immu1_vs_pre <- 
      lfcShrink(dds, 
                coef = "timepoint_immu1_vs_pre", 
                type = "apeglm", 
                parallel = F)
    
    immu2_vs_pre <- 
      lfcShrink(dds, 
                coef = "timepoint_immu2_vs_pre", 
                type = "apeglm", 
                parallel = F)
    
    DGE_immu_vs_pre <- 
      list("immu1_vs_pre" = immu1_vs_pre, 
           "immu2_vs_pre" = immu2_vs_pre)
    
    return(DGE_immu_vs_pre)
  })

names(DGE_immu_vs_pre) <- vacc_l

readr::write_rds(DGE_immu_vs_pre, "../data/DElist/DGE_immu_vs_pre.rds")
```

```{r volcano plot and DE list write}

gene_data_Type <- readRDS("../data/gene_data_Type.rds")

if (!dir.exists("../data/DElist/")) {dir.create("../data/DElist")}
if (!dir.exists("../data/figure")) {dir.create("../data/figure")}

mapply(function(vacc, contrast){
  res <- DGE_immu_vs_pre[[vacc]][[contrast]] %>% 
    as_tibble(rownames = "gene_name") %>% 
    filter(!gene_name %>% str_detect("ENSMFAG"))
  
  volcano <- 
    EnhancedVolcano(
      res,
      lab = res$gene_name,
      x = "log2FoldChange",
      y = "pvalue",
      title = vacc,
      subtitle = contrast
      )
  
  res_filt <- 
    res %>% filter(abs(log2FoldChange) > 1,
                   padj < .05) %>% 
    arrange(-log2FoldChange) %>% 
    left_join(gene_data_Type %>% 
                dplyr::select(gene_name, description))
    
  res_filt %>% readr::write_csv(
    paste0("../data/DElist/", 
           paste0("DE_", vacc, "_",contrast, ".csv"))
    )
  
  ggsave(paste0("../data/figure/", 
                paste0("vocalno_", vacc, "_",contrast, ".jpg")),
         volcano, width = 8, height = 8, dpi = 600)
  
  
}, 
  rep(vacc_l, 2), 
  c(rep("immu1_vs_pre", 2), rep("immu2_vs_pre", 2))
)

```

## CAF04 immune 1 vs immune 2

```{r}
fun_extract_de_up <- 
  function(vacc, contrast){
    
    res <- DGE_immu_vs_pre[[vacc]][[contrast]] %>% 
      as_tibble(rownames = "gene_name") %>% 
      filter(!gene_name %>% str_detect("ENSMFAG"))
    
    res_filt <- 
      res %>% filter(log2FoldChange > 1,
                     padj < .05) %>% 
      arrange(-log2FoldChange) %>% 
      left_join(gene_data_Type %>% 
                  dplyr::select(gene_name, description),
                by = "gene_name")
    
    g_name <- res_filt %>% pull(gene_name)
    return(g_name)
    } 

CAF09_immu1 <- fun_extract_de_up("H107_CAF09c", "immu1_vs_pre")
CAF09_immu2 <- fun_extract_de_up("H107_CAF09c", "immu2_vs_pre")

list(`CAF09 immu1 vs. pre` = CAF09_immu1, 
     `CAF09 immu2 vs. pre` = CAF09_immu2) %>% 
  ggvenn()

```

```{r}
CAF04_immu1 <- fun_extract_de_up("H107_CAF04_CpG", "immu1_vs_pre")
CAF04_immu2 <- fun_extract_de_up("H107_CAF04_CpG", "immu2_vs_pre")
list(`CAF04 immu1 vs. pre` = CAF04_immu1, 
     `CAF04 immu2 vs. pre` = CAF04_immu2) %>% 
  ggvenn()
```

## CAF09 vs CAF04CpG

```{r CAF09 vs CAF04CpG}

immu1_caf09_caf04CpG <- 
  list(CAF09 = CAF09_immu1,
       CAF04_CpG = CAF04_immu1) %>% 
  ggvenn() +
  ggtitle("Up-regulated genes - after first immunization")

immu1_caf09_caf04CpG
```

```{r}
library(enrichR)

# library(gprofiler2)
# convert <- 
# gprofiler2::gorth(CAF09_immu1, 
#                   source_organism = "mfascicularis", 
#                   target_organism = "hsapiens")
# mean(convert$input == convert$ortholog_name) # 99.87%

enrichment <- 
  enrichr(CAF09_immu1[CAF09_immu1 %in% CAF04_immu1], 
          databases = "GO_Biological_Process_2023") # overlap 304

enrichment[[1]] %>% 
  as_tibble() %>% 
  arrange(-Combined.Score)

enrichment <- 
  enrichr(CAF09_immu1[!CAF09_immu1 %in% CAF04_immu1], 
          databases = "GO_Biological_Process_2023") # overlap 304

enrichment[[1]] %>% 
  as_tibble() %>% 
  arrange(-Combined.Score)

enrichment <- 
  enrichr(CAF04_immu1[!CAF04_immu1 %in% CAF09_immu1], 
          databases = "GO_Molecular_Function_2023") # overlap 304

enrichment[[1]] %>% 
  as_tibble() %>% 
  arrange(-Combined.Score)


```

### Compare between vacc

```{r}
se_vacc_effect_first <- 
  se[rowData(se)$.abundant == TRUE, se$timepoint == "immu1"]

rownames(se_vacc_effect_first) <- rowData(se_vacc_effect_first)$gene_name
    
count <- se_vacc_effect_first %>% assay(1) %>% as.matrix() %>% round()
    
dds <- 
  DESeqDataSetFromMatrix(
    count, 
    colData = colData(se_vacc_effect_first),
    design = ~ vacc)
  
dds <- DESeq(dds, parallel = F)

resultsNames(dds)
  
res_vacc <- 
      lfcShrink(dds, 
                coef = "vacc_H107_CAF09c_vs_H107_CAF04_CpG", 
                type = "apeglm", 
                parallel = F)

res_vacc %>% as_tibble(rownames = "gene_name") %>% 
  filter(padj < 0.05, abs(log2FoldChange) > 1)

EnhancedVolcano(
  res_vacc,
  rownames(res_vacc),
  x = "log2FoldChange",
  y = "pvalue", 
  title = "CAF09c vs CAF04 CpG",
  subtitle = "After the first immunization"
)

```

## Pathway

```{r eval=FALSE}
DGE_immu_vs_pre[["H107_CAF09c"]][["immu1_vs_pre"]] %>% 
  as_tibble(rownames = "gene_name") %>% 
  filter(log2FoldChange > 1, padj < .5, !str_detect(gene_name, "ENSMFAG")) %>% 
  arrange(-log2FoldChange) %>% 
  pull(gene_name) %>% 
  writeLines("../data/_tmp_caf09c_first_immune.gene")

```

```{r}
library(progeny)
library(decoupleR)

progeny_d <- get_progeny(top = 100)

count <- log2(assay(se, 3) + 1) %>% as.matrix()
rownames(count) <- rowData(se)$gene_name

sample_acts <- run_wmean(
  count %>% as.matrix(),
  net = progeny_d,
  .mor = "weight"
)

stat <- 
  colData(se) %>% 
  as_tibble(rownames = "sample_name") %>% 
  left_join(sample_acts, by = c(sample_name = "condition")) %>% 
  filter(statistic == "norm_wmean")
  
stat %>% 
  ggplot(aes(x = vacc, y = score, fill = timepoint)) +
  geom_boxplot() +
  facet_wrap(~ source)


stat %>% 
  ggboxplot(x = "vacc", y = "score", fill = "timepoint", 
            facet.by = "source", scales = "free", add = "dotplot") +
  stat_compare_means()

stat %>% 
  ggpaired()

```

```{r}
library(OmnipathR)
go <- OmnipathR::get_ontology_db(key = "goa_human", child_parents = F)

```

## Pathway - targeted

```{r}



pathway_data <- 
  msigdbr::msigdbr(subcategory = "GO:BP")

pathway_data_interferon <- 
  pathway_data %>% filter(
    gs_name %in% c("GOBP_RESPONSE_TO_INTERFERON_ALPHA", 
                   "GOBP_CELLULAR_RESPONSE_TO_INTERFERON_BETA",
                   "GOBP_CELLULAR_RESPONSE_TO_INTERFERON_GAMMA")
  ) %>% 
  rename(source = gs_name,
         target = gene_symbol) %>% 
  dplyr::select(source, target) %>% distinct() %>% 
  mutate(mor = 1) #mode of regulation 

gsva <- 
  decouple(count, pathway_data_interferon, statistics = "gsva")

gsva_clean <- 
  colData(se) %>% 
  as_tibble(rownames = "sample_name") %>% 
  left_join(gsva, by = c(sample_name = "condition"))

gsva_clean %>% 
  ggboxplot(x = "vacc", y = "score", fill = "timepoint", 
            facet.by = "source", scales = "free", add = "dotplot") +
  stat_compare_means()
```

```{r}
gsva_clean %>% 
  ggboxplot(x = "timepoint", y = "score", fill = "vacc", 
            facet.by = "source", scales = "free", add = "dotplot") +
  stat_compare_means()
```

#### Heatmap

```{r}
library(ComplexHeatmap)



heatmap_g <- 
  pathway_data_interferon %>% 
  filter(target %in% c(CAF04_immu1, CAF04_immu2, CAF09_immu1, CAF09_immu2))

heatmap_m <- count[heatmap_g$target, ]

heatmap_m_z <- heatmap_m %>% t() %>% scale() %>% t()

gene_theme <- heatmap_g$source %>% unique %>% str_extract("INTERFERON_(ALPHA|BETA|GAMMA)")
gene_theme_color <- RColorBrewer::brewer.pal(
  length(gene_theme), "Accent")
names(gene_theme_color) <- gene_theme


heatmap_annotation <- 
  HeatmapAnnotation(
    `vacc` = colData(se) %>% as_tibble() %>% pull(vacc) %>% str_remove("H107_"),
    `timepoint` = colData(se) %>% as_tibble() %>% pull(timepoint)
  )

heatmap_body <- 
  Heatmap(heatmap_m_z, 
          show_column_names = F,
          top_annotation = heatmap_annotation,
          column_split = colData(se) %>% as_tibble() %>% pull(timepoint),
          row_split = heatmap_g$source,
          row_title = gt_render(gene_theme),
          row_title_rot = 0,
          row_title_side = "right",
          row_title_gp = gpar(fill = gene_theme_color))

draw(heatmap_body, annotation_legend_side = "top")
```

```{r}

```
