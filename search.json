[
  {
    "objectID": "1_data_processing.html",
    "href": "1_data_processing.html",
    "title": "Mapping",
    "section": "",
    "text": "We processed the raw RNA-seq data by nf-core rnaseq (version 3.12.0) (Ewels et al. 2020), a community-curated best practice workflow.\nIn brief, the sequence read quality was checked by fastqc. Then, the adapter and low-quality reads were trimmed by “Trim Galore!”. The reads were mapped to Macaca fascicularis reference genome 6.0 by HISAT2 (Kim et al. 2019), and annotated by Emsembl 109. The mapped counts were counted by Salmon (Patro et al. 2017).\nThis analysis was performed on Computerome 2.0 (The Danish National Life Science Supercomputing Center).\n#/bin/bash\ncd /home/projects/cu_10181/people/tuhu/PAXgene\nmodule load jdk/18.0.2.1 nextflow/22.10.4 singularity/3.9.6 anaconda3/2023.03\nnextflow run nf-core/rnaseq \\\n    -revision 3.12.0 \\\n    -profile singularity \\\n    -w data/nextflow_wd \\\n    --fasta /home/projects/cu_10181/data/_reference/macaca_fascicularis/Macaca_fascicularis.Macaca_fascicularis_6.0.dna_rm.toplevel.fa.gz \\\n    --gtf /home/projects/cu_10181/data/_reference/macaca_fascicularis/Macaca_fascicularis.Macaca_fascicularis_6.0.109.gtf.gz \\\n    --input data/nextflow_input.csv \\\n    --outdir data/nextflow_outputdir \\\n    --max_cpus 40 \\\n    --max_memory 170GB\n\n\n\n\nThis analysis intends to test an alternative analysis pipeline, by pseudo mapping using Salmon sololy. The analysis results were NOT used in the publication.\n#/bin/bash\ncd /home/projects/cu_10181/people/tuhu/PAXgene\nmodule load jdk/18.0.2.1 nextflow/22.10.4 singularity/3.9.6 anaconda3/2023.03\nnextflow run nf-core/rnaseq \\\n    -revision 3.12.0 \\\n    -profile singularity \\\n    -w data/nextflow_wd_salmon \\\n    --fasta /home/projects/cu_10181/data/_reference/macaca_fascicularis/Macaca_fascicularis.Macaca_fascicularis_6.0.dna_rm.toplevel.fa.gz \\\n    --gtf /home/projects/cu_10181/data/_reference/macaca_fascicularis/Macaca_fascicularis.Macaca_fascicularis_6.0.109.gtf.gz \\\n    --trimmer fastp \\\n    --pseudo_aligner salmon \\\n    --skip_alignment \\\n    --input data/nextflow_input.csv \\\n    --outdir data/nextflow_outputdir_salmon \\\n    --max_cpus 40 \\\n    --max_memory 170GB"
  },
  {
    "objectID": "3_cleaning_qc_pca_analysis.html",
    "href": "3_cleaning_qc_pca_analysis.html",
    "title": "RNAseq downstream analysis - data cleaning, QC, PCA analysis",
    "section": "",
    "text": "library(dplyr)\nlibrary(stringr)\nlibrary(tidybulk)\nlibrary(tidySummarizedExperiment)\nlibrary(biomaRt)\nlibrary(ggplot2)\nlibrary(ggpubr)"
  },
  {
    "objectID": "3_cleaning_qc_pca_analysis.html#prepare-the-data",
    "href": "3_cleaning_qc_pca_analysis.html#prepare-the-data",
    "title": "RNAseq downstream analysis - data cleaning, QC, PCA analysis",
    "section": "Prepare the data",
    "text": "Prepare the data\n\nSummarizedExperiment\nThe .rds file was generated from the nextflow pipeline, which is already in the SummarizedExperiment object.\n\nse <- readRDS(\"../data/salmon.merged.gene_counts.rds\")\nse\n\n# A SummarizedExperiment-tibble abstraction: 1,156,500 × 30\n# \u001b[90mFeatures=38550 | Samples=30 | Assays=counts, abundance\u001b[0m\n   .feature           .sample     counts abundance files names gene_id gene_name\n   <chr>              <chr>        <dbl>     <dbl> <chr> <chr> <chr>   <chr>    \n 1 ENSMFAG00000000004 CFL069.201… 2.00e0     0.319 CFL0… CFL0… ENSMFA… ENSMFAG0…\n 2 ENSMFAG00000000025 CFL069.201… 2.1 e1     1.78  CFL0… CFL0… ENSMFA… SKA1     \n 3 ENSMFAG00000000028 CFL069.201… 1.1 e1     0.822 CFL0… CFL0… ENSMFA… SLITRK1  \n 4 ENSMFAG00000000029 CFL069.201… 2   e0     0.131 CFL0… CFL0… ENSMFA… PNMA2    \n 5 ENSMFAG00000000032 CFL069.201… 0          0     CFL0… CFL0… ENSMFA… SNORD113…\n 6 ENSMFAG00000000034 CFL069.201… 4   e0     0.749 CFL0… CFL0… ENSMFA… ENSMFAG0…\n 7 ENSMFAG00000000036 CFL069.201… 1.4 e1     0.550 CFL0… CFL0… ENSMFA… SLC5A5   \n 8 ENSMFAG00000000037 CFL069.201… 4.47e3   255.    CFL0… CFL0… ENSMFA… GRB2     \n 9 ENSMFAG00000000038 CFL069.201… 7.83e2    15.3   CFL0… CFL0… ENSMFA… EEA1     \n10 ENSMFAG00000000039 CFL069.201… 2.79e2    32.5   CFL0… CFL0… ENSMFA… ID2      \n# ℹ 40 more rows\n\n\n\n\nSample meta data\nThis dataset is rather small, thus I manually created the metadata.\n\nmetadata <-\n  tibble(sample_name = colnames(se)) %>% \n  mutate(animal = sample_name %>% str_extract(\"[:alnum:]{1,6}\"),\n         sample_date =  sample_name %>% str_extract(\"[:digit:]{4}\\\\.[:digit:]{2}\\\\.[:digit:]{2}\"),\n         vacc = case_when(\n           animal %in% c(\"CFL098\", \"CGB091\", \"CGB093\", \"CGB097\", \"CGB104\") ~ \"H107_CAF04_CpG\",\n           animal %in% c(\"CFL069\", \"CGA054\", \"CGB065\", \"CGB088\", \"CGC010\") ~ \"H107_CAF09c\"\n         ),\n         timepoint = case_when(\n           sample_date == \"2019.06.24\" ~ \"pre\", # pre-immunization\n           sample_date == \"2019.06.25\" ~ \"immu1\", # day 1 after immunization 1\n           sample_date == \"2019.07.23\" ~ \"immu2\" # day 1 after immunization 2\n         ),\n         timepoint = factor(timepoint, levels = c(\"pre\", \"immu1\", \"immu2\")))\ncol_data <- \n  metadata %>% tibble::column_to_rownames(\"sample_name\") %>% \n  DataFrame()\ncolData(se) <- col_data\n\nTo note, H107_CAF04_CpG is equivalent to CAF10b. H107_CAF09c is equivalent to CAF09hi . I kept them consistent in the figures and publication. But in my code, I did not harmonize them, in afraid of side-effects.\n\n\nGene annotation data\nI generated gene annotation data (rowData of the SummarizedExperiment object) by querying ensembl. I used runonce::save_run to save the query results, because the connection to Ensembl is not always stable.\n\ngene_data_Type <- \n  runonce::save_run(\n    {\n      ensembl <- useEnsembl(biomart = \"genes\", \n                            dataset = \"mfascicularis_gene_ensembl\")\n      gene_data <- getBM(\n        attributes = c(\"ensembl_gene_id\", \"description\", \"gene_biotype\"), \n        mart = ensembl)\n      \n      gene_data_Type <- \n        rowData(se) %>% as_tibble(rownames = \"rowname\") %>% \n        left_join(gene_data, by = c(\"gene_id\" = \"ensembl_gene_id\"))\n      \n      gene_data_Type\n    }, \"../data/gene_data_Type.rds\"\n  )\nrowData(se) <- gene_data_Type %>% tibble::column_to_rownames() %>% DataFrame()\n\nI kept only protein coding genes for downstream analysis.\n\nse_pcoding <- se[rowData(se)$gene_biotype == \"protein_coding\", ] # protein coding gene"
  },
  {
    "objectID": "3_cleaning_qc_pca_analysis.html#pca-story-telling",
    "href": "3_cleaning_qc_pca_analysis.html#pca-story-telling",
    "title": "RNAseq downstream analysis - data cleaning, QC, PCA analysis",
    "section": "PCA (Story-telling)",
    "text": "PCA (Story-telling)\n\nVisualization (draft)\nThis was our first draft of visualization. The information was too complicated to comprehend. Thus, we fancied a better visualization below.\n\npca_data <- attr(pca_filtS, \"internals\")$PCA\nvariance_explained <- pca_data$sdev^2\nproportion_variance_explained <- variance_explained / sum(variance_explained)\n\n\npca_filtS %>% pivot_sample() %>%\n  ggplot(aes(x = PC1, y = PC2, color = timepoint, shape = vacc)) +\n  geom_point() +\n  coord_equal(ratio = 1) +\n  theme_bw() +\n  xlab(paste0(\"PC1 (\", sprintf(\"%.1f%%\", proportion_variance_explained[1] * 100), \")\")) +\n  ylab(paste0(\"PC2 (\", sprintf(\"%.1f%%\", proportion_variance_explained[2] * 100), \")\")) +\n  theme(aspect.ratio=1) +\n  scale_shape_manual(values = c(1, 16, 17))\n\n\n\n\n\n\nVisualization (publication)\n\ng_immune1 <- \n  pca_filtS %>% pivot_sample() %>%\n  filter(timepoint != \"immu2\") %>% \n  mutate(timepoint_vacc = paste(timepoint, vacc),\n         timepoint_vacc = case_when(timepoint == \"pre\" ~ \"pre\",\n                                    .default = timepoint_vacc)) %>% \n  ggplot(aes(x = PC1, y = PC2, color = timepoint_vacc, fill = timepoint_vacc)) +\n  geom_point() +\n  stat_ellipse(type = \"t\") +\n  coord_equal(ratio = 1, xlim = c(-60, 70), ylim = c(-45, 55)) +\n  theme_bw() +\n  theme(aspect.ratio=1, legend.position = \"none\") +\n  scale_shape_manual(values = c(1, 16, 17)) +\n  scale_color_manual(values = c(\"red\", \"blue\", \"black\")) +\n  xlab(paste0(\"PC1 (\", sprintf(\"%.1f%%\", proportion_variance_explained[1] * 100), \")\")) +\n  ylab(paste0(\"PC2 (\", sprintf(\"%.1f%%\", proportion_variance_explained[2] * 100), \")\")) \n\ng_immune1\n\n\n\nggsave(\"../data/figure/pca_immune1.png\", g_immune1, dpi = 500, \n       width = 5, height = 5, scale = 0.8)\n\n\ng_immune2 <- \npca_filtS %>% pivot_sample() %>%\n  filter(timepoint != \"immu1\") %>% \n  mutate(timepoint_vacc = paste(timepoint, vacc),\n         timepoint_vacc = case_when(timepoint == \"pre\" ~ \"pre\",\n                                    .default = timepoint_vacc)) %>% \n  ggplot(aes(x = PC1, y = PC2, color = timepoint_vacc, fill = timepoint_vacc)) +\n  geom_point() +\n  stat_ellipse(type = \"t\") +\n  coord_equal(ratio = 1, xlim = c(-60, 70), ylim = c(-45, 55)) +\n  theme_bw() +\n  theme(aspect.ratio=1, legend.position = \"none\") +\n  scale_shape_manual(values = c(1, 16, 17)) +\n  scale_color_manual(values = c(\"red\", \"blue\", \"black\")) +\n  xlab(paste0(\"PC1 (\", sprintf(\"%.1f%%\", proportion_variance_explained[1] * 100), \")\")) +\n  ylab(paste0(\"PC2 (\", sprintf(\"%.1f%%\", proportion_variance_explained[2] * 100), \")\"))\n\ng_immune2\n\n\n\nggsave(\"../data/figure/pca_immune2.png\", g_immune2, dpi = 500, \n       width = 5, height = 5, scale = 0.8)"
  },
  {
    "objectID": "4_DGE_analysis.html",
    "href": "4_DGE_analysis.html",
    "title": "Differential gene expression analysis",
    "section": "",
    "text": "library(DESeq2)\nlibrary(EnhancedVolcano)\nlibrary(ggvenn)\nlibrary(stringr)\nlibrary(ggpubr)\n\n\nse <- readRDS(\"../data/se_pcoding_scale_abundant_filtS.rds\")"
  },
  {
    "objectID": "4_DGE_analysis.html#compare-after--timepoint-1-2-and-pre--immune-within-each-vacc",
    "href": "4_DGE_analysis.html#compare-after--timepoint-1-2-and-pre--immune-within-each-vacc",
    "title": "Differential gene expression analysis",
    "section": "Compare after- (timepoint 1, 2) and pre- immune within each vacc",
    "text": "Compare after- (timepoint 1, 2) and pre- immune within each vacc\nI used lapply below, thus the code is a bit abstract to read. In short, for each vaccine, I performed two DGE (differential gene expression) analysis to compare (1) Immu1 vs. baseline (Day 1 after the first immunization vs. baseline), and (2) Immu2 vs. baseline (Day 1 after the second immunization vs. baseline)\n\nvacc_l <- se$vacc %>% unique()\nDGE_immu_vs_pre <- \n  lapply(vacc_l,\n         function(vacc){\n    se <-   \n      se[rowData(se)$.abundant == TRUE,se$vacc == vacc]\n    rownames(se) <- rowData(se)$gene_name\n    \n    count <- se %>% assay(1) %>% \n      as.matrix() %>% \n      round()\n    \n    dds <- \n      DESeqDataSetFromMatrix(\n        count, \n        colData = colData(se),\n        design = ~ animal + timepoint\n        )\n  \n    dds <- DESeq(dds, parallel = F)\n  \n    immu1_vs_pre <- \n      lfcShrink(dds, \n                coef = \"timepoint_immu1_vs_pre\", \n                type = \"apeglm\", \n                parallel = F)\n    \n    immu2_vs_pre <- \n      lfcShrink(dds, \n                coef = \"timepoint_immu2_vs_pre\", \n                type = \"apeglm\", \n                parallel = F)\n    \n    DGE_immu_vs_pre <- \n      list(\"immu1_vs_pre\" = immu1_vs_pre, \n           \"immu2_vs_pre\" = immu2_vs_pre)\n    \n    return(DGE_immu_vs_pre)\n  })\n\nnames(DGE_immu_vs_pre) <- vacc_l\n\nreadr::write_rds(DGE_immu_vs_pre, \"../data/DElist/DGE_immu_vs_pre.rds\")\n\n\ngene_data_Type <- readRDS(\"../data/gene_data_Type.rds\")\nif (!dir.exists(\"../data/DElist/\")) {dir.create(\"../data/DElist\")}\nif (!dir.exists(\"../data/figure\")) {dir.create(\"../data/figure\")}\nmapply(function(vacc, contrast){\n  res <- DGE_immu_vs_pre[[vacc]][[contrast]] %>% \n    as_tibble(rownames = \"gene_name\") %>% \n    filter(!gene_name %>% str_detect(\"ENSMFAG\"))\n  \n  volcano <- \n    EnhancedVolcano(\n      res,\n      lab = res$gene_name,\n      x = \"log2FoldChange\",\n      y = \"pvalue\",\n      title = vacc,\n      subtitle = contrast\n      )\n  \n  res_filt <- \n    res %>% filter(abs(log2FoldChange) > 1,\n                   padj < .05) %>% \n    arrange(-log2FoldChange) %>% \n    left_join(gene_data_Type %>% \n                dplyr::select(gene_name, description))\n    \n  res_filt %>% readr::write_csv(\n    paste0(\"../data/DElist/\", \n           paste0(\"DE_\", vacc, \"_\",contrast, \".csv\"))\n    )\n  \n  ggsave(paste0(\"../data/figure/\", \n                paste0(\"vocalno_\", vacc, \"_\",contrast, \".jpg\")),\n         volcano, width = 8, height = 8, dpi = 600)\n  \n  \n}, \n  rep(vacc_l, 2), \n  c(rep(\"immu1_vs_pre\", 2), rep(\"immu2_vs_pre\", 2))\n)\n\n                                             H107_CAF09c \n   \"../data/figure/vocalno_H107_CAF09c_immu1_vs_pre.jpg\" \n                                          H107_CAF04_CpG \n\"../data/figure/vocalno_H107_CAF04_CpG_immu1_vs_pre.jpg\" \n                                             H107_CAF09c \n   \"../data/figure/vocalno_H107_CAF09c_immu2_vs_pre.jpg\" \n                                          H107_CAF04_CpG \n\"../data/figure/vocalno_H107_CAF04_CpG_immu2_vs_pre.jpg\""
  },
  {
    "objectID": "4_DGE_analysis.html#caf09hi-immu-1-vs.-baseline-immu-2-vs.-baseline",
    "href": "4_DGE_analysis.html#caf09hi-immu-1-vs.-baseline-immu-2-vs.-baseline",
    "title": "Differential gene expression analysis",
    "section": "CAF09hi: immu 1 vs. baseline & immu 2 vs. baseline",
    "text": "CAF09hi: immu 1 vs. baseline & immu 2 vs. baseline\n\nfun_extract_de_up <- \n  function(vacc, contrast){\n    \n    res <- DGE_immu_vs_pre[[vacc]][[contrast]] %>% \n      as_tibble(rownames = \"gene_name\") %>% \n      filter(!gene_name %>% str_detect(\"ENSMFAG\"))\n    \n    res_filt <- \n      res %>% filter(log2FoldChange > 1,\n                     padj < .05) %>% \n      arrange(-log2FoldChange) %>% \n      left_join(gene_data_Type %>% \n                  dplyr::select(gene_name, description),\n                by = \"gene_name\")\n    \n    g_name <- res_filt %>% pull(gene_name)\n    return(g_name)\n    } \n\nCAF09_immu1 <- fun_extract_de_up(\"H107_CAF09c\", \"immu1_vs_pre\")\nCAF09_immu2 <- fun_extract_de_up(\"H107_CAF09c\", \"immu2_vs_pre\")\n\nlist(`CAF09hi immu1 vs. pre` = CAF09_immu1, \n     `CAF09hi immu2 vs. pre` = CAF09_immu2) %>% \n  ggvenn()"
  },
  {
    "objectID": "4_DGE_analysis.html#caf10b-immu-1-vs.-baseline-immu-2-vs.-baseline",
    "href": "4_DGE_analysis.html#caf10b-immu-1-vs.-baseline-immu-2-vs.-baseline",
    "title": "Differential gene expression analysis",
    "section": "CAF10b: immu 1 vs. baseline & immu 2 vs. baseline",
    "text": "CAF10b: immu 1 vs. baseline & immu 2 vs. baseline\n\nCAF04_immu1 <- fun_extract_de_up(\"H107_CAF04_CpG\", \"immu1_vs_pre\")\nCAF04_immu2 <- fun_extract_de_up(\"H107_CAF04_CpG\", \"immu2_vs_pre\")\nlist(`CAF10b immu1 vs. pre` = CAF04_immu1, \n     `CAF10b immu2 vs. pre` = CAF04_immu2) %>% \n  ggvenn()"
  },
  {
    "objectID": "4_DGE_analysis.html#caf09-vs-caf04cpg",
    "href": "4_DGE_analysis.html#caf09-vs-caf04cpg",
    "title": "Differential gene expression analysis",
    "section": "CAF09 vs CAF04CpG",
    "text": "CAF09 vs CAF04CpG\n\nimmu1_caf09_caf04CpG <- \n  list(CAF09hi = CAF09_immu1,\n       CAF10b = CAF04_immu1) %>% \n  ggvenn() +\n  ggtitle(\"Up-regulated genes - after first immunization\")\n\nimmu1_caf09_caf04CpG"
  },
  {
    "objectID": "4_DGE_analysis.html#compare-between-two-vaccines",
    "href": "4_DGE_analysis.html#compare-between-two-vaccines",
    "title": "Differential gene expression analysis",
    "section": "Compare between two vaccines",
    "text": "Compare between two vaccines\nI also performed a comparison between two vaccines. The results showed that not many genes were differentially expressed when make a head-to-head comparison between two vaccines. Thus, it is more appropriate to take the previous approach to compare each timepoint to the baseline.\n\nse_vacc_effect_first <- \n  se[rowData(se)$.abundant == TRUE, se$timepoint == \"immu1\"]\n\nrownames(se_vacc_effect_first) <- rowData(se_vacc_effect_first)$gene_name\n    \ncount <- se_vacc_effect_first %>% assay(1) %>% as.matrix() %>% round()\n    \ndds <- \n  DESeqDataSetFromMatrix(\n    count, \n    colData = colData(se_vacc_effect_first),\n    design = ~ vacc)\n  \ndds <- DESeq(dds, parallel = F)\n\nres_vacc <- \n      lfcShrink(dds, \n                coef = \"vacc_H107_CAF09c_vs_H107_CAF04_CpG\", \n                type = \"apeglm\", \n                parallel = F)\n\nEnhancedVolcano(\n  res_vacc,\n  rownames(res_vacc),\n  x = \"log2FoldChange\",\n  y = \"pvalue\", \n  title = \"CAF09hi vs CAF10b\",\n  subtitle = \"After the first immunization\"\n)"
  },
  {
    "objectID": "5_vacc_pre_pathway_enrichment.html",
    "href": "5_vacc_pre_pathway_enrichment.html",
    "title": "Vacc vs. Pre pathway enrichment",
    "section": "",
    "text": "library(dplyr)\nlibrary(tidybulk)\nlibrary(fgsea)\nlibrary(purrr)\nlibrary(ggplot2)\n\n\n\n\nDEG <- readRDS(\"../data/DElist/DGE_immu_vs_pre.rds\")\nstr(DEG, max.level = 2)\n\nList of 2\n $ H107_CAF09c   :List of 2\n  ..$ immu1_vs_pre:Formal class 'DESeqResults' [package \"DESeq2\"] with 7 slots\n  ..$ immu2_vs_pre:Formal class 'DESeqResults' [package \"DESeq2\"] with 7 slots\n $ H107_CAF04_CpG:List of 2\n  ..$ immu1_vs_pre:Formal class 'DESeqResults' [package \"DESeq2\"] with 7 slots\n  ..$ immu2_vs_pre:Formal class 'DESeqResults' [package \"DESeq2\"] with 7 slots\n\n\n\n\n\nWe used the following gene sets:\n\nCP:REACTOME (Reactome Pathways): 1615 pathways\nGO:BP (Gene Ontology Biological Process): 7658 pathways\nGO:MF (Gene Ontology Molecular Function): 1738 pathways\n\nThese gene sets are highly redundant. Because GO:BP is the most comprehensive one (7658 pathways). Thus, we only used GO:BP (Gene ontology biological process) in the publication. The authors are welcome to explore the results from Reactome or Gene ontology molecular functions.\n\ngs <- \n  tibble(gs_name = c(\"CP:REACTOME\", \n                     \"GO:BP\", \n                     \"GO:MF\")) %>% \n  mutate(gs_list = purrr::map(gs_name, function(subcat){\n  gs_df <- msigdbr::msigdbr(species = \"Homo sapiens\", \n                            subcategory = subcat) %>% \n    group_by(gs_name) %>% tidyr::nest() %>% \n    mutate(gene_id = purrr::map(data, ~ .x %>% pull(gene_symbol))) %>% select(-data)\n  gs_list <- gs_df$gene_id\n  names(gs_list) <- gs_df$gs_name\n  return(gs_list)\n}))"
  },
  {
    "objectID": "5_vacc_pre_pathway_enrichment.html#pathway-enrichment-by-fgsea",
    "href": "5_vacc_pre_pathway_enrichment.html#pathway-enrichment-by-fgsea",
    "title": "Vacc vs. Pre pathway enrichment",
    "section": "Pathway enrichment by fgsea",
    "text": "Pathway enrichment by fgsea\nI used functional programming (purrr::map) below.\n\ndesign <- \n  tidyr::expand_grid(\n    gs_name  = gs$gs_name, \n    vacc = names(DEG),\n    contrast = c(\"immu1_vs_pre\", \"immu2_vs_pre\")\n    )\n\nresult <- \n  design %>% \n  mutate(\n    gs = map(gs_name, function(x){\n      gs <- gs[gs$gs_name == x, ]$gs_list[[1]]\n      return(gs)\n      }),\n    DEG = map2(vacc, contrast, \n               ~ DEG[[.x]][[.y]] %>% \n                 as_tibble(rownames = \"gene_name\") %>% \n                 filter(padj < 0.05) %>% \n                 select(gene_name, log2FoldChange) %>% \n                 tibble::deframe()),\n    pathway_enrichment =\n      map2(gs, DEG, ~ fgsea(pathways = .x, stats = .y) %>% \n             as_tibble() %>% \n             filter(padj < 0.05) %>% \n             arrange(-NES)) \n    )\n\nsaveRDS(result, \"../data/pathway_enrichment/GSEA_enrichment.rds\")\n# result <- readRDS(\"../data/pathway_enrichment/GSEA_enrichment.rds\")\n\ngobp_enrichment <- \n  result %>% filter(gs_name == \"GO:BP\") %>% pull(pathway_enrichment)\n\nnames(gobp_enrichment) <- \n  result %>% filter(gs_name == \"GO:BP\") %>% \n  mutate(name = paste(vacc, contrast, sep = \"_\")) %>% \n  pull(name)\n\nopenxlsx::write.xlsx(gobp_enrichment, \n                     file = \"../data/pathway_enrichment/GSEA_enrichment_gobp.xlsx\")\n\n\nPros and Cons:\n\nGO:BP: comprehensive, but a lot of redundancy.\nFor example, the top 10 pathways of H107_CAF09c immu1_vs_pre are:\n\n“GOBP_DEFENSE_RESPONSE_TO_SYMBIONT”\n“GOBP_NEGATIVE_REGULATION_OF_VIRAL_PROCESS”\n“GOBP_TYPE_I_INTERFERON_PRODUCTION”\n“GOBP_RESPONSE_TO_VIRUS”\n“GOBP_REGULATION_OF_VIRAL_PROCESS”\n“GOBP_RESPONSE_TO_TYPE_I_INTERFERON”\n“GOBP_POSITIVE_REGULATION_OF_TYPE_I_INTERFERON_PRODUCTION”\n“GOBP_NEGATIVE_REGULATION_OF_VIRAL_GENOME_REPLICATION”\n“GOBP_INTERFERON_BETA_PRODUCTION”\n“GOBP_CYTOKINE_MEDIATED_SIGNALING_PATHWAY”\n\n\nNo of enriched pathways:\n\nGO:BP\n\nH107_CAF09c\n\nimmu1_vs_pre: 313\nimmu2_vs_pre: 232\n\nH107_CAF04_CpG\n\nimmu1_vs_pre: 68\nimmu2_vs_pre: 95\n\n\n\n\n\npathway_list <- \n  readxl::read_excel(\"../data/gene_set.xlsx\") %>% \n  dplyr::rename(pathway = GO_term) %>% \n  mutate(pathway_display = factor(pathway_display, \n                                  levels = rev(pathway_display)),\n         theme = factor(theme, levels = c(\"Innate response\",\n                                          \"Cytokine\",\n                                          \"Type I IFN\"),\n                        labels = c(\"Innate~~response\",\n                                   \"Cytokine\",\n                                   \"Type~~I~~IFN\")))\n\n\nt_bubble <- \n  result %>% \n  dplyr::select(gs_name:contrast, pathway_enrichment) %>% \n  unnest(cols = \"pathway_enrichment\") %>% \n  inner_join(pathway_list) %>% \n  mutate(`-log10 P-value` = -log10(padj),\n         contrast = case_when(\n           contrast == \"immu1_vs_pre\" ~ \"Day 1 after\\n1st immu.\",\n           contrast == \"immu2_vs_pre\" ~ \"Day 1 after\\n2nd immu.\"\n         ),\n         vacc = case_when(\n           vacc == \"H107_CAF04_CpG\" ~ \"CAF10b\",\n           vacc == \"H107_CAF09c\" ~ \"CAF09hi\"\n         ),\n         vacc = factor(vacc, levels = c(\"CAF10b\", \"CAF09hi\"),\n                       labels = c(\"CAF10b\", \"CAF09^hi\")))\n\nJoining with `by = join_by(pathway)`\n\ng_bubble <- \n  t_bubble %>% \n  ggplot(aes(x = contrast, y = pathway_display, color = NES, size = `-log10 P-value`)) +\n  geom_point() +\n  facet_grid(theme ~ vacc, scales = \"free\", space = \"free\", labeller = label_parsed) +\n  scale_size_area(max_size = 8) + \n  scale_color_gradient2(low=\"blue\", mid = \"white\", high=\"red\") +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(y = NULL)\n\nggsave(\"../data/figure/gsea_bubble.png\", g_bubble, \n       height = 6.2, width = 8, dpi = 600)"
  },
  {
    "objectID": "5_vacc_pre_pathway_enrichment.html#bubble-plot",
    "href": "5_vacc_pre_pathway_enrichment.html#bubble-plot",
    "title": "Vacc vs. Pre pathway enrichment",
    "section": "Bubble plot",
    "text": "Bubble plot"
  },
  {
    "objectID": "6_correlation_late_response.html",
    "href": "6_correlation_late_response.html",
    "title": "Correlation w. late response",
    "section": "",
    "text": "library(dplyr)\nlibrary(SummarizedExperiment)\nlibrary(GSVA)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(purrr)"
  },
  {
    "objectID": "6_correlation_late_response.html#load-gene-expression-data",
    "href": "6_correlation_late_response.html#load-gene-expression-data",
    "title": "Correlation w. late response",
    "section": "Load gene expression data",
    "text": "Load gene expression data\n\nse <- readr::read_rds(\"../data/se_pcoding_scale_abundant_filtS.rds\")"
  },
  {
    "objectID": "6_correlation_late_response.html#calulate-gsva-scores",
    "href": "6_correlation_late_response.html#calulate-gsva-scores",
    "title": "Correlation w. late response",
    "section": "Calulate GSVA scores",
    "text": "Calulate GSVA scores\nGSVA scores were calculated for each sample using the gene sets from the Molecular Signatures Database (MSigDB).\n\ncount_matrix <- \n  se %>% assay(3) %>% as.matrix() # log2-transformed normalized counts\ncount_matrix <- log2(count_matrix + 1)\n\n\ngs <- \n  tibble(gs_name = c(\"CP:REACTOME\", \n                     \"GO:BP\", \n                     \"GO:MF\")) %>% \n  mutate(gs_list = purrr::map(gs_name, function(subcat){\n  gs_df <- msigdbr::msigdbr(species = \"Homo sapiens\", \n                            subcategory = subcat) %>% \n    group_by(gs_name) %>% tidyr::nest() %>% \n    mutate(gene_id = purrr::map(data, ~ .x %>% pull(gene_symbol))) %>% select(-data)\n  gs_list <- gs_df$gene_id\n  names(gs_list) <- gs_df$gs_name\n  return(gs_list)\n}))\n\ngs_GOBP <- gs$gs_list[[2]]\n\n\npathway_score <- gsva(\n  count_matrix, gs_GOBP, verbose=FALSE\n)\n\n\npathway_list <- \n  readxl::read_excel(\"../data/gene_set.xlsx\") %>% \n  dplyr::rename(pathway = GO_term) %>% \n  mutate(pathway_display = factor(pathway_display, \n                                  levels = rev(pathway_display)),\n         theme = factor(theme, levels = c(\"Innate response\",\n                                          \"Cytokine\",\n                                          \"Type I IFN\"),\n                        labels = c(\"Innate~~response\",\n                                   \"Cytokine\",\n                                   \"Type~~I~~IFN\")))\n\n\n\n\npathway_score_selected <- \n  pathway_score[pathway_list$pathway, ] %>% t() %>% \n  as_tibble(rownames = \"sample_name\") %>% \n  mutate(animal = sample_name %>% str_extract(\"[:alnum:]{6}\"),\n         sample_date = sample_name %>% str_extract(\"[:digit:]{4}\\\\.[:digit:]{2}\\\\.[:digit:]{2}\")) %>% \n  left_join(colData(se) %>% as_tibble() %>% select(animal:timepoint),\n            by = c(\"animal\", \"sample_date\")) %>% \n  select(!contains(\"GOBP\"), contains(\"GOBP\"))\n\n\n# calculate the baseline score (for filling the missing values)\npathway_score_baseline <- \n  pathway_score_selected %>% \n    filter(timepoint == \"pre\") %>% \n    select(contains(\"GOBP\"))\npathway_score_baseline_mean <- colMeans(pathway_score_baseline)\n\n# add missing values with imputed\npathway_score_selected_addmissing <- \n  pathway_score_selected %>% \n  bind_rows(\n    tibble(sample_name = c(\"CGB097.2019.06.24\", \"CGB065.2019.06.24\"),\n       animal = c(\"CGB097\", \"CGB065\"),\n       sample_date = c(\"2019.06.24\", \"2019.06.24\"),\n       vacc = c(\"H107_CAF04_CpG\", \"H107_CAF09c\"),\n       timepoint = c(\"pre\", \"pre\")) %>% \n      bind_cols(pathway_score_baseline_mean %>% as.data.frame() %>% t())\n  ) \n\npathway_score_selected_addmissing_baseline_corr <- # baseline correction\n  pathway_score_selected_addmissing %>% \n  arrange(animal, sample_date) %>% \n  group_by(animal) %>% \n  nest() %>% \n  mutate(data_baseline_corr = map(data, function(x){\n    GOBP_index <- x %>% colnames() %>% str_detect(\"GOBP\") %>% which()\n    x_baseline_corr <- \n      bind_rows(x[2, GOBP_index] - x[1, GOBP_index],\n                x[3, GOBP_index] - x[1, GOBP_index])\n    x_baseline_corr_meta <- \n      x[2:3, -GOBP_index] %>% \n      bind_cols(x_baseline_corr)\n    return(x_baseline_corr_meta)\n  })) %>% \n  select(-data) %>% \n  unnest(data_baseline_corr)"
  },
  {
    "objectID": "6_correlation_late_response.html#load-late-response-data",
    "href": "6_correlation_late_response.html#load-late-response-data",
    "title": "Correlation w. late response",
    "section": "Load late response data",
    "text": "Load late response data\n\nlate_response <- \n  readxl::read_xlsx(\"../data/Late_response_parameters.xlsx\") %>% \n  mutate(across(contains(c(\"ELISPOT\", \"BAL\")), as.numeric))\n\nWarning: There were 5 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `across(contains(c(\"ELISPOT\", \"BAL\")), as.numeric)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 4 remaining warnings.\n\n\n\nlate_response_meta <- \n  pathway_score_selected_addmissing_baseline_corr %>% \n  left_join(late_response, by = c(\"animal\" = \"NHP Name\")) %>% \n  ungroup()"
  },
  {
    "objectID": "6_correlation_late_response.html#calculate-correlation",
    "href": "6_correlation_late_response.html#calculate-correlation",
    "title": "Correlation w. late response",
    "section": "Calculate correlation",
    "text": "Calculate correlation\n\ncorr_plot <- \n  late_response_meta %>% \n  group_by(timepoint) %>% \n  nest() %>% \n  mutate(\n    corr = map(data, function(x){\n    t <- x %>% dplyr::select(contains(c(\"GOBP\", \"ELISPOT\", \"BAL\")))\n    colnames(t) <- colnames(t) %>% str_remove(\"GOBP_\") %>% str_replace(\"INTERLEUKIN_\", \"IL\")\n    m <- t %>% as.matrix()\n    \n    cor_coefficient <-  cor(m, use= \"complete.obs\", method = \"spearman\")\n    cor_coefficient <- cor_coefficient[1:18, 19:23]\n    rownames(cor_coefficient) <- pathway_list$pathway_display\n    colnames(cor_coefficient) <-\n      colnames(cor_coefficient) %>%\n      str_replace_all(\"_\", \" \")\n    \n    p_mat <- corrplot::cor.mtest(m, method = \"spearman\")\n    p_mat <- p_mat$p[1:18, 19:23]\n    \n    result <- list(p_mat = p_mat, cor_coefficient = cor_coefficient)\n    \n    return(result)\n  }),\n    plot = pmap(list(timepoint, corr), \n                function(x2, x3){\n                  fn <- paste0(\"../data/figure/\", x2, \".png\")\n                  png(width = 12, height = 10, units = \"in\", file = fn, res = 600)\n                  corrplot::corrplot(x3[[\"cor_coefficient\"]],\n                                     title = paste(x2),\n                                     mar = c(1, 1, 1, 1),\n                                     # col=colorRampPalette(c(\"blue\",\"white\",\"red\"))(200),\n                                     col = corrplot::COL2(\"BrBG\"),\n                                     cl.align.text = \"l\",\n                                     # cl.pos = \"b\",\n                                     # cl.length = 15,\n                                     p.mat = x3[[\"p_mat\"]]\n                                     )\n                  dev.off()\n                }))"
  },
  {
    "objectID": "6_correlation_late_response.html#correlation-plot",
    "href": "6_correlation_late_response.html#correlation-plot",
    "title": "Correlation w. late response",
    "section": "Correlation plot",
    "text": "Correlation plot\n\nThe first immunization\n\n\n\n\n\n\n\nThe second immunization"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "If you have any questions about this compendium, please address to Tu Hu. tuhu [at] ssi.dk"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The bioinformatics compendium",
    "section": "",
    "text": "This is a bioinformatics compendium for the publication: Woodworth et al. A novel adjuvant formulation induces robust Th1/Th17 memory and mucosal recall responses in Non-Human Primates.\nThe authors strive to contribute to the scientific rigor, reproducibility, and transparency.\nThus, we provide this compendium, in order to:\n\nDocument a fully reproducible pipeline\nFacilitate the readers to freely access the data, statistical models, analysis"
  },
  {
    "objectID": "index.html#data-availability",
    "href": "index.html#data-availability",
    "title": "The bioinformatics compendium",
    "section": "Data availability",
    "text": "Data availability\n\nGSExxxx: RNA-seq data for 30 samples has been deposited on GEO under the accession number xxxx (pending approval)"
  },
  {
    "objectID": "index.html#bioinformatics-methods-and-resources",
    "href": "index.html#bioinformatics-methods-and-resources",
    "title": "The bioinformatics compendium",
    "section": "Bioinformatics methods and resources",
    "text": "Bioinformatics methods and resources\n\nRefernce genome and annotation\n\nEnsembl genome assembilies: Macaca_fascicularis_6.0 (GCA_011100615.1), fasta file\nEnsembl annotation release: 109, gtf file\n\n\n\nGitHub repository\n\nStructure\n\n\n\n\n\n\n\nFile\nDescription\n\n\n\n\nanalysis\\0_generate_nextflow_input.R\ngenerate input file for nextflow\n\n\nanalysis\\1_RNA_SEQ_MAPPING.sh\nRNA-seq maaping by nf-core (STAR/Salmon)\n\n\nanalysis\\2_RNA_SEQ_MAPPING_SALMON.sh\nRNA-seq mapping by nf-core (only Salmon)\n\n\nanalysis\\3_RNAseq_data_cleaning.Rmd\nRNA-seq: data cleaning and QC\n\n\nanalysis\\1_RNAseq_downstream_1.Rmd\nFigure 4a - PCA plots\n\n\nanalysis\\5_vacc_pre_pathway_enrichment.qmd\nFigure 4b - Bubble plot for fGSEA pathway enrichment analysis\n\n\nanalysis\\6_correlation_late_response.qmd\nFigure 4c - correlate early blood signature with late response\n\n\nrenv.lock\nThe version of R/Bioconductor packages was documented using renv"
  }
]